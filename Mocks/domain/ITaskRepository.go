// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	domain "task_management/Domain"

	mock "github.com/stretchr/testify/mock"
)

// ITaskRepository is an autogenerated mock type for the ITaskRepository type
type ITaskRepository struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: task
func (_m *ITaskRepository) CreateTask(task domain.Task) error {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(domain.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTask provides a mock function with given fields: id
func (_m *ITaskRepository) DeleteTask(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTaskById provides a mock function with given fields: id
func (_m *ITaskRepository) GetTaskById(id string) (domain.Task, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskById")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (domain.Task, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) domain.Task); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasks provides a mock function with no fields
func (_m *ITaskRepository) GetTasks() []domain.Task {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []domain.Task
	if rf, ok := ret.Get(0).(func() []domain.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	return r0
}

// ReplaceTask provides a mock function with given fields: id, newTask
func (_m *ITaskRepository) ReplaceTask(id string, newTask domain.Task) (domain.Task, error) {
	ret := _m.Called(id, newTask)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceTask")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string, domain.Task) (domain.Task, error)); ok {
		return rf(id, newTask)
	}
	if rf, ok := ret.Get(0).(func(string, domain.Task) domain.Task); ok {
		r0 = rf(id, newTask)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(string, domain.Task) error); ok {
		r1 = rf(id, newTask)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewITaskRepository creates a new instance of ITaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITaskRepository {
	mock := &ITaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
